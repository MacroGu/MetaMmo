/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once

#include "KBECommon.h"

namespace KBEngine
{


// defined in */scripts/entity_defs/types.xml

typedef uint8 UINT8;

typedef uint16 UINT16;

typedef uint64 UINT64;

typedef uint32 UINT32;

typedef int8 INT8;

typedef int16 INT16;

typedef int32 INT32;

typedef int64 INT64;

typedef FString STRING;

typedef FString KBE_UNICODE;

typedef float FLOAT;

typedef double DOUBLE;

typedef TArray<uint8> PYTHON;

typedef TArray<uint8> PY_DICT;

typedef TArray<uint8> PY_TUPLE;

typedef TArray<uint8> PY_LIST;

typedef TArray<uint8> ENTITYCALL;

typedef TArray<uint8> BLOB;

typedef FVector2D VECTOR2;

typedef FVector VECTOR3;

typedef FVector4 VECTOR4;

typedef uint8 BOOL;

class STRING_LIST : public TArray<uint16>
{
public:

	STRING_LIST()
	{
	}

};

inline bool operator ==(const STRING_LIST& a, const STRING_LIST& b)
{
	return a == b;
};

class UINT16_LIST : public TArray<uint16>
{
public:

	UINT16_LIST()
	{
	}

};

inline bool operator ==(const UINT16_LIST& a, const UINT16_LIST& b)
{
	return a == b;
};

class UINT64_LIST : public TArray<uint64>
{
public:

	UINT64_LIST()
	{
	}

};

inline bool operator ==(const UINT64_LIST& a, const UINT64_LIST& b)
{
	return a == b;
};

typedef int32 ENTITY_ID;

class ENTITY_LIST : public TArray<int32>
{
public:

	ENTITY_LIST()
	{
	}

};

inline bool operator ==(const ENTITY_LIST& a, const ENTITY_LIST& b)
{
	return a == b;
};

class ITEM
{
public:
	uint64 uid;
	uint32 id;
	uint32 num;
	uint16 bagIndex;

	ITEM():
	uid(0),
	id(0),
	num(0),
	bagIndex(0)
	{
	}

};

inline bool operator ==(const ITEM& a, const ITEM& b)
{
	return a.uid == b.uid && a.id == b.id && a.num == b.num && a.bagIndex == b.bagIndex;
};

class ITEM_LIST : public TArray<ITEM>
{
public:

	ITEM_LIST()
	{
	}

};

inline bool operator ==(const ITEM_LIST& a, const ITEM_LIST& b)
{
	return a == b;
};

class CHAT_INFO
{
public:
	uint64 dbid;
	uint64 targetDBID;
	uint8 chatType;
	uint32 sceneID;
	FString name;
	FString chatContent;

	CHAT_INFO():
	dbid(0),
	targetDBID(0),
	chatType(0),
	sceneID(0),
	name(),
	chatContent()
	{
	}

};

inline bool operator ==(const CHAT_INFO& a, const CHAT_INFO& b)
{
	return a.dbid == b.dbid && a.targetDBID == b.targetDBID && a.chatType == b.chatType && a.sceneID == b.sceneID && a.name == b.name && a.chatContent == b.chatContent;
};

class SKILL_INFO
{
public:
	uint8 skillId;
	FVector spawnPos;
	FVector targetPos;

	SKILL_INFO():
	skillId(0),
	spawnPos(),
	targetPos()
	{
	}

};

inline bool operator ==(const SKILL_INFO& a, const SKILL_INFO& b)
{
	return a.skillId == b.skillId && a.spawnPos == b.spawnPos && a.targetPos == b.targetPos;
};

class AVATAR_BRIEF_INFO
{
public:
	uint64 dbid;
	uint8 sex;
	FString name;
	TArray<uint8> facade;

	AVATAR_BRIEF_INFO():
	dbid(0),
	sex(0),
	name(),
	facade()
	{
	}

};

inline bool operator ==(const AVATAR_BRIEF_INFO& a, const AVATAR_BRIEF_INFO& b)
{
	return a.dbid == b.dbid && a.sex == b.sex && a.name == b.name && a.facade == b.facade;
};

class AVATAR_BRIEF_INFO_LIST : public TArray<AVATAR_BRIEF_INFO>
{
public:

	AVATAR_BRIEF_INFO_LIST()
	{
	}

};

inline bool operator ==(const AVATAR_BRIEF_INFO_LIST& a, const AVATAR_BRIEF_INFO_LIST& b)
{
	return a == b;
};

class ANIM_INFO
{
public:
	float Speed;
	float Direction;

	ANIM_INFO():
	Speed(0.0f),
	Direction(0.0f)
	{
	}

};

inline bool operator ==(const ANIM_INFO& a, const ANIM_INFO& b)
{
	return a.Speed == b.Speed && a.Direction == b.Direction;
};


}